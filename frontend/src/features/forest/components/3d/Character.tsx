/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 public/models/character.glb -o src/components/Character.jsx -r public
*/

import { useAnimations, useGLTF } from "@react-three/drei";
import * as THREE from "three";
import { useEffect, useRef } from "react";

interface CharacterProps {
  animation?: string;
  [key: string]: any;
}

export function Character({ animation, ...props }: CharacterProps) {
  const group = useRef<THREE.Group>(null);
  const { nodes, materials, animations } = useGLTF("/models/character.glb");
  const { actions } = useAnimations(animations, group);
  useEffect(() => {
    if (animation && actions[animation]) {
      actions[animation].reset().fadeIn(0.24).play();
      return () => {
        actions[animation]?.fadeOut(0.24);
      };
    }
  }, [animation, actions]);
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="fall_guys">
          <primitive object={nodes._rootJoint} />
          <skinnedMesh
            name="body"
            geometry={(nodes.body as any)?.geometry}
            material={materials.Material}
            skeleton={(nodes.body as any)?.skeleton}
            castShadow
            receiveShadow
          />
          <skinnedMesh
            name="eye"
            geometry={(nodes.eye as any)?.geometry}
            material={materials.Material}
            skeleton={(nodes.eye as any)?.skeleton}
            castShadow
            receiveShadow
          />
          <skinnedMesh
            name="hand-"
            geometry={(nodes["hand-"] as any)?.geometry}
            material={materials.Material}
            skeleton={(nodes["hand-"] as any)?.skeleton}
            castShadow
            receiveShadow
          />
          <skinnedMesh
            name="leg"
            geometry={(nodes.leg as any)?.geometry}
            material={materials.Material}
            skeleton={(nodes.leg as any)?.skeleton}
            castShadow
            receiveShadow
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/models/character.glb");